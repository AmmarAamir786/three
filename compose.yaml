version: '3.9'  # Ensure the version is specified

services:
  product_service:
    build:
      context: ./product_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_service:/code
    depends_on:
      - kafka-ui
      - broker
    ports:
      - "8008:8008"
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8008 --reload

  order_service:
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code
    depends_on:
      - kafka-ui
      - broker
    ports:
      - "8004:8004"
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8004 --reload

  inventory_service:
    build:
      context: ./inventory_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_service:/code
    depends_on:
      - kafka-ui
      - broker
    ports:
      - "8005:8005"
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8005 --reload

  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification_service:/code
    depends_on:
      - kafka-ui
      - broker
    ports:
      - "8006:8006"
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8006 --reload

  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user_service:/code
    depends_on:
      - kafka-ui
      - broker
    ports:
      - "8007:8007"
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8007 --reload

  product_db:
    image: postgres:latest
    restart: always
    container_name: product_db_container
    environment:
      - POSTGRES_USER=asma
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=product_db
    ports:
      - '5433:5432'
    volumes:
      - product_db:/var/lib/postgresql/data

  user_db:
    image: postgres:latest
    restart: always
    container_name: user_db_container
    environment:
      - POSTGRES_USER=asma
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=user_db
    ports:
      - '5434:5432'
    volumes:
      - user_db:/var/lib/postgresql/data

  order_db:
    image: postgres:latest
    restart: always
    container_name: order_db_container
    environment:
      - POSTGRES_USER=asma
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=order_db
    ports:
      - '5435:5432'
    volumes:
      - order_db:/var/lib/postgresql/data

  notification_db:
    image: postgres:latest
    restart: always
    container_name: notification_db_container
    environment:
      - POSTGRES_USER=asma
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=notification_db
    ports:
      - '5436:5432'
    volumes:
      - notification_db:/var/lib/postgresql/data

  inventory_db:
    image: postgres:latest
    restart: always
    container_name: inventory_db_container
    environment:
      - POSTGRES_USER=asma
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=inventory_db
    ports:
      - '5437:5432'
    volumes:
      - inventory_db:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  product_db:
   driver: local
  user_db:
   driver: local
  order_db:
  notification_db:
   driver: local
  inventory_db:
   driver: local

networks:
  default:
    driver: bridge













































    # version: "3.8"
# name: asma_mart

# services:

#   product_service:
#     build:
#       context: ./product_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./product_service:/code  # Sync local development directory with the container
#     depends_on:
#         - kafka-ui
#         - broker
#     ports:
#       - "8008:8008"  
#     command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8008 --reload

  
#   order_service:
#     build:
#       context: ./order_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./order_service:/code  # Sync local development directory with the container
#     depends_on:

#         - kafka-ui
#         - broker
#     ports:
#       - "8004:8004"   
#     command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8004 --reload

  
#   inventory_service:
#     build:
#       context: ./inventory_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./inventory_service:/code  # Sync local development directory with the container
#     depends_on:
#         - kafka-ui
#         - broker
#     ports:
#       - "8005:8005" 
#     command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8005  --reload

#   notification_service:
#     build:
#       context: ./notification_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./notification_service:/code  # Sync local development directory with the container
#     depends_on:
#         - kafka-ui
#         - broker
#     ports:
#       - "8006:8006"  
#     command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8006 --reload

#   user_service:
#     build:
#       context: ./user_service
#       dockerfile: Dockerfile.dev
#     volumes:
#       - ./user_service:/code  # Sync local development directory with the container
#     depends_on:
#         - kafka-ui
#         - broker
#     ports:
#       - "8007:8007"   
#     command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8007 --reload 


      
#   product_db:
#     image: postgres:latest  # Use the official PostgreSQL image
#     restart: always
#     container_name: product_db_container
#     environment: 
#         - POSTGRES_USER=asma
#         - POSTGRES_PASSWORD=my_password
#         - POSTGRES_DB=product_db
#     ports:
#         - '5433:5432'
#     volumes:
#         - product_db:/var/lib/postgresql/data

#   user_db:
#     image: postgres:latest  # Use the official PostgreSQL image
#     restart: always
#     container_name: user_db_container
#     environment:
#         - POSTGRES_USER=asma
#         - POSTGRES_PASSWORD=my_password
#         - POSTGRES_DB=user_db
#     ports:
#         - '5434:5432'
#     volumes:
#         - user_db:/var/lib/postgresql/data

#   order_db:
#       image: postgres:latest  # Use the official PostgreSQL image
#       restart: always
#       container_name: order_db_container
#       environment:
#         - POSTGRES_USER=asma
#         - POSTGRES_PASSWORD=my_password
#         - POSTGRES_DB=order_db
#       ports:
#         - '5435:5432'
#       volumes:
#         - order_db:/var/lib/postgresql/data

#   notification_db:
#       image: postgres:latest  # Use the official PostgreSQL image
#       restart: always
#       container_name: notification_db_container
#       environment:
#         - POSTGRES_USER=asma
#         - POSTGRES_PASSWORD=my_password
#         - POSTGRES_DB=notification_db
#       ports:
#         - '5436:5432'
#       volumes:
#         - notification_db:/var/lib/postgresql/data

#   inventory_db:
#       image: postgres:latest  # Use the official PostgreSQL image
#       restart: always
#       container_name: inventory_db_container
#       environment:
#         - POSTGRES_USER=asma
#         - POSTGRES_PASSWORD=my_password
#         - POSTGRES_DB=inventory_db
#       ports:
#         - '5437:5432'
#       volumes:
#         - inventory_db:/var/lib/postgresql/data
      
#   # api:
#   #   build:
#   #     context: ./todo
#   #     dockerfile: Dockerfile.dev
#   #   volumes:
#   #     - ./todo:/code  # Sync local development directory with the container
#   #   depends_on:
#   #       - postgres_db
#   #       - broker
#   #   ports:
#   #     - "8000:8000"  # Expose container port 8000 to host port 8000  

#   # api2:
#   #   build:
#   #     context: ./microservice_02
#   #     dockerfile: Dockerfile.dev
#   #   volumes:
#   #     - ./microservice_02:/code  # Sync local development directory with the container
#   #   depends_on:
#   #       - postgres_db
#   #       - broker
#   #   ports:
#   #     - "8002:8000"  # Expose container port 8000 to host port 8000  
  
# # postgres_db:
# #     image: postgres:latest  # Use the official PostgreSQL image
# #     restart: always
# #     container_name: PostgresCont
# #     environment:
# #         - POSTGRES_USER=asma
# #         - POSTGRES_PASSWORD=my_password
# #         - POSTGRES_DB=postgres_db
# #     ports:
# #         - '5438:5432'
# #     volumes:
# #         - postgres_db:/var/lib/postgresql/data



#   broker:
#     image: apache/kafka:3.7.0
#     hostname: broker
#     container_name: broker
#     ports:
#       - '9092:9092'
#     environment:
#       KAFKA_NODE_ID: 1
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#       KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
#       KAFKA_PROCESS_ROLES: 'broker,controller'
#       KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
#       KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
#       KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
#       KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#       CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

#   kafka-ui:
#     image: provectuslabs/kafka-ui
#     container_name: kafka-ui
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
#       DYNAMIC_CONFIG_ENABLED: "true"
#     depends_on:
#       - broker


#   volumes:
#     postgres_db:
#       driver: local
#     product_db:
#      driver: local
#     user_db:
#      driver: local
#     inventory_db:
#      driver: local
#     notification_db:
#      driver: local
#     order_db:
#      driver: local
   
#   networks:
#     default:
#       driver: bridge